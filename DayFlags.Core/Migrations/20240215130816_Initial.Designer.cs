// <auto-generated />
using System;
using DayFlags.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DayFlags.Core.Migrations
{
    [DbContext(typeof(DayFlagsDb))]
    [Migration("20240215130816_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DayFlags.Core.Models.DayFlag", b =>
                {
                    b.Property<Guid>("FlagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Creator")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("FlagTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("FlagId");

                    b.HasIndex("Date");

                    b.HasIndex("FlagTypeId");

                    b.ToTable("DayFlags");
                });

            modelBuilder.Entity("DayFlags.Core.Models.FlagGroup", b =>
                {
                    b.Property<Guid>("FlagGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FlagGroupKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("RealmId")
                        .HasColumnType("uuid");

                    b.Property<bool>("SingleFlagPerDay")
                        .HasColumnType("boolean");

                    b.HasKey("FlagGroupId");

                    b.HasIndex("FlagGroupKey");

                    b.HasIndex("RealmId");

                    b.ToTable("FlagGroups");
                });

            modelBuilder.Entity("DayFlags.Core.Models.FlagType", b =>
                {
                    b.Property<Guid>("FlagTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FlagGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("FlagTypeKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("RealmId")
                        .HasColumnType("uuid");

                    b.HasKey("FlagTypeId");

                    b.HasIndex("FlagGroupId");

                    b.HasIndex("FlagTypeKey");

                    b.HasIndex("RealmId");

                    b.ToTable("FlagTypes");
                });

            modelBuilder.Entity("DayFlags.Core.Models.Realm", b =>
                {
                    b.Property<Guid>("RealmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.HasKey("RealmId");

                    b.ToTable("Realms");
                });

            modelBuilder.Entity("DayFlags.Core.Models.DayFlag", b =>
                {
                    b.HasOne("DayFlags.Core.Models.FlagType", "FlagType")
                        .WithMany()
                        .HasForeignKey("FlagTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlagType");
                });

            modelBuilder.Entity("DayFlags.Core.Models.FlagGroup", b =>
                {
                    b.HasOne("DayFlags.Core.Models.Realm", "Realm")
                        .WithMany()
                        .HasForeignKey("RealmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("DayFlags.Core.Models.FlagType", b =>
                {
                    b.HasOne("DayFlags.Core.Models.FlagGroup", "FlagGroup")
                        .WithMany("Children")
                        .HasForeignKey("FlagGroupId");

                    b.HasOne("DayFlags.Core.Models.Realm", "Realm")
                        .WithMany()
                        .HasForeignKey("RealmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlagGroup");

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("DayFlags.Core.Models.FlagGroup", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
