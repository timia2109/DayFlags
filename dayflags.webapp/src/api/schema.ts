/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  [path: `/api/Realm/${string}/DayFlag`]: {
    get: {
      parameters: {
        query?: {
          /** @description Filter Flags with the FlagTypes Keys */
          FlagTypeKeys?: string[];
          /** @description Filter Flags with the FlagGroup Keys */
          FlagGroupKeys?: string[];
          /** @description Specify the MinDate (including) */
          MinDate?: string;
          /** @description Specify the MaxDate (including) */
          MaxDate?: string;
          /** @description Page number */
          Page?: number;
          /** @description Size of pages */
          PageSize?: number;
        };
        path: {
          realmId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DayFlagResponsePagingResponse"];
            "application/json": components["schemas"]["DayFlagResponsePagingResponse"];
            "text/json": components["schemas"]["DayFlagResponsePagingResponse"];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          realmId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["DayFlagPayload"];
          "text/json": components["schemas"]["DayFlagPayload"];
          "application/*+json": components["schemas"]["DayFlagPayload"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  [path: `/api/Realm/${string}/DayFlag/${string}`]: {
    get: {
      parameters: {
        path: {
          realmId: string;
          dayFlagId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DayFlagResponsePagingResponse"];
            "application/json": components["schemas"]["DayFlagResponsePagingResponse"];
            "text/json": components["schemas"]["DayFlagResponsePagingResponse"];
          };
        };
      };
    };
  };
  [path: `/api/Realm/${string}/FlagGroup`]: {
    /** Get all FlagGroups in this realm */
    get: {
      parameters: {
        query?: {
          /** @description Page number */
          Page?: number;
          /** @description Size of pages */
          PageSize?: number;
        };
        path: {
          /** @description Realm ID */
          realmId: string;
        };
      };
      responses: {
        /** @description The FlagGroups */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagGroupPayloadPagingResponse"];
            "application/json": components["schemas"]["FlagGroupPayloadPagingResponse"];
            "text/json": components["schemas"]["FlagGroupPayloadPagingResponse"];
          };
        };
      };
    };
    /** Creates a FlagGroup */
    post: {
      parameters: {
        path: {
          /** @description Realm Id */
          realmId: string;
        };
      };
      /** @description Payload */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["FlagGroupPayload"];
          "text/json": components["schemas"]["FlagGroupPayload"];
          "application/*+json": components["schemas"]["FlagGroupPayload"];
        };
      };
      responses: {
        /** @description The FlagGroup was created */
        201: {
          content: {
            "text/plain": components["schemas"]["FlagGroupPayload"];
            "application/json": components["schemas"]["FlagGroupPayload"];
            "text/json": components["schemas"]["FlagGroupPayload"];
          };
        };
        /** @description The FlagGroupKey is already used */
        409: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  [path: `/api/Realm/${string}/FlagGroup/${string}`]: {
    /** Gets a single FlagGroup */
    get: {
      parameters: {
        path: {
          /** @description Realm ID */
          realmId: string;
          /** @description Key for the group */
          flagGroupKey: string;
        };
      };
      responses: {
        /** @description FlagGroup */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagGroupPayload"];
            "application/json": components["schemas"]["FlagGroupPayload"];
            "text/json": components["schemas"]["FlagGroupPayload"];
          };
        };
        /** @description FlagGroup not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Updates a flag gruop */
    put: {
      parameters: {
        path: {
          /** @description Realm ID */
          realmId: string;
          /** @description Key of the FlagGroup */
          flagGroupKey: string;
        };
      };
      /** @description Payload */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["FlagGroupPayload"];
          "text/json": components["schemas"]["FlagGroupPayload"];
          "application/*+json": components["schemas"]["FlagGroupPayload"];
        };
      };
      responses: {
        /** @description The FlagGroup was updated */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagGroupPayload"];
            "application/json": components["schemas"]["FlagGroupPayload"];
            "text/json": components["schemas"]["FlagGroupPayload"];
          };
        };
        /** @description FlagGroup not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Deletes a FlagGroup */
    delete: {
      parameters: {
        path: {
          /** @description Realm Id */
          realmId: string;
          /** @description Key of the FlagGroup */
          flagGroupKey: string;
        };
      };
      responses: {
        /** @description The FlagGroup was deleted */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagGroupPayload"];
            "application/json": components["schemas"]["FlagGroupPayload"];
            "text/json": components["schemas"]["FlagGroupPayload"];
          };
        };
        /** @description FlagGroup not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  [path: `/api/Realm/${string}/FlagGroup/${string}/FlagType`]: {
    /** Get all children FlagType of this FlagGroup */
    get: {
      parameters: {
        query?: {
          /** @description Page number */
          Page?: number;
          /** @description Size of pages */
          PageSize?: number;
        };
        path: {
          /** @description Realm ID */
          realmId: string;
          /** @description FlagGroupKey */
          flagGroupKey: string;
        };
      };
      responses: {
        /** @description Children */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagTypePayloadPagingResponse"];
            "application/json": components["schemas"]["FlagTypePayloadPagingResponse"];
            "text/json": components["schemas"]["FlagTypePayloadPagingResponse"];
          };
        };
        /** @description FlagGroup not found */
        404: {
          content: never;
        };
      };
    };
  };
  [path: `/api/Realm/${string}/FlagType`]: {
    /** Gets all FlagTypes of this realm */
    get: {
      parameters: {
        query?: {
          /** @description Page number */
          Page?: number;
          /** @description Size of pages */
          PageSize?: number;
        };
        path: {
          /** @description RealmId */
          realmId: string;
        };
      };
      responses: {
        /** @description FlagTypes */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagTypePayloadPagingResponse"];
            "application/json": components["schemas"]["FlagTypePayloadPagingResponse"];
            "text/json": components["schemas"]["FlagTypePayloadPagingResponse"];
          };
        };
      };
    };
    /** Creates FlagType */
    post: {
      parameters: {
        path: {
          /** @description RealmId */
          realmId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["FlagTypePayload"];
          "text/json": components["schemas"]["FlagTypePayload"];
          "application/*+json": components["schemas"]["FlagTypePayload"];
        };
      };
      responses: {
        /** @description The FlagType was created */
        200: {
          content: never;
        };
        /** @description Created */
        201: {
          content: {
            "text/plain": components["schemas"]["FlagTypePayload"];
            "application/json": components["schemas"]["FlagTypePayload"];
            "text/json": components["schemas"]["FlagTypePayload"];
          };
        };
        /** @description The FlagTypeKey is already used in this realm */
        409: {
          content: never;
        };
      };
    };
  };
  [path: `/api/Realm/${string}/FlagType/${string}`]: {
    /** Gets a single FlagType */
    get: {
      parameters: {
        path: {
          /** @description RealmId */
          realmId: string;
          /** @description Key of the FlagType */
          flagTypeKey: string;
        };
      };
      responses: {
        /** @description The searched FlagType */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagTypePayload"];
            "application/json": components["schemas"]["FlagTypePayload"];
            "text/json": components["schemas"]["FlagTypePayload"];
          };
        };
        /** @description The FlagType was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Updates a FlagType */
    put: {
      parameters: {
        path: {
          /** @description RealmId */
          realmId: string;
          /** @description The FlagTypeKey */
          flagTypeKey: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["FlagTypePayload"];
          "text/json": components["schemas"]["FlagTypePayload"];
          "application/*+json": components["schemas"]["FlagTypePayload"];
        };
      };
      responses: {
        /** @description The FlagType was updated */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagTypePayload"];
            "application/json": components["schemas"]["FlagTypePayload"];
            "text/json": components["schemas"]["FlagTypePayload"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description The new FlagTypeKey is already used in this realm */
        409: {
          content: never;
        };
      };
    };
    /** Deletes a FlagType */
    delete: {
      parameters: {
        path: {
          /** @description RealmId */
          realmId: string;
          /** @description Key of the FlagType */
          flagTypeKey: string;
        };
      };
      responses: {
        /** @description The FlagType was deleted */
        200: {
          content: {
            "text/plain": components["schemas"]["FlagTypePayload"];
            "application/json": components["schemas"]["FlagTypePayload"];
            "text/json": components["schemas"]["FlagTypePayload"];
          };
        };
        /** @description The FlagType was not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/Realm": {
    /** Fetches all Realms */
    get: {
      parameters: {
        query?: {
          /** @description Page number */
          Page?: number;
          /** @description Size of pages */
          PageSize?: number;
        };
      };
      responses: {
        /** @description All created realms */
        200: {
          content: {
            "text/plain": components["schemas"]["RealmResponsePagingResponse"];
            "application/json": components["schemas"]["RealmResponsePagingResponse"];
            "text/json": components["schemas"]["RealmResponsePagingResponse"];
          };
        };
      };
    };
    /** Creates an Realm */
    post: {
      /** @description The new realm */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RealmPayload"];
          "text/json": components["schemas"]["RealmPayload"];
          "application/*+json": components["schemas"]["RealmPayload"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "text/plain": components["schemas"]["RealmResponse"];
            "application/json": components["schemas"]["RealmResponse"];
            "text/json": components["schemas"]["RealmResponse"];
          };
        };
      };
    };
  };
  [path: `/api/Realm/${string}`]: {
    /** Gets a single Realm */
    get: {
      parameters: {
        path: {
          /** @description Id of the realm */
          realmId: string;
        };
      };
      responses: {
        /** @description Realm received */
        200: {
          content: {
            "text/plain": components["schemas"]["RealmResponse"];
            "application/json": components["schemas"]["RealmResponse"];
            "text/json": components["schemas"]["RealmResponse"];
          };
        };
        /** @description Realm not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Updates an Realm */
    put: {
      parameters: {
        path: {
          /** @description Affected Realm */
          realmId: string;
        };
      };
      /** @description Updated Realm */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RealmPayload"];
          "text/json": components["schemas"]["RealmPayload"];
          "application/*+json": components["schemas"]["RealmPayload"];
        };
      };
      responses: {
        /** @description Realm updated */
        200: {
          content: {
            "text/plain": components["schemas"]["RealmResponse"];
            "application/json": components["schemas"]["RealmResponse"];
            "text/json": components["schemas"]["RealmResponse"];
          };
        };
        /** @description Realm not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Deletes a Realm */
    delete: {
      parameters: {
        path: {
          /** @description Affected realm */
          realmId: string;
        };
      };
      responses: {
        /** @description Realm deleted */
        200: {
          content: {
            "text/plain": components["schemas"]["RealmResponse"];
            "application/json": components["schemas"]["RealmResponse"];
            "text/json": components["schemas"]["RealmResponse"];
          };
        };
        /** @description Realm not found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    DayFlagPayload: {
      /** @description Related DayFlag */
      flagTypeKey?: string | null;
      /**
       * Format: date
       * @description Affected Date
       */
      date?: string;
    };
    DayFlagResponse: {
      /** @description Related DayFlag */
      flagTypeKey?: string | null;
      /**
       * Format: date
       * @description Affected Date
       */
      date?: string;
      /**
       * Format: uuid
       * @description Id of this DayFlag
       */
      flagId?: string;
      /**
       * Format: date-time
       * @description Creation Time
       */
      created?: string;
    };
    /** @description Generic Pagination Response */
    DayFlagResponsePagingResponse: {
      /**
       * Format: int32
       * @description Page number
       */
      page?: number;
      /**
       * Format: int32
       * @description Size of pages
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Total Pages
       */
      totalPages?: number;
      /** @description Item response */
      items?: components["schemas"]["DayFlagResponse"][] | null;
    };
    FlagGroupPayload: {
      flagGroupKey?: string | null;
      /** @description A human friendly description */
      description?: string | null;
      /** @description Controls if only a single entry per day is allowed */
      singleFlagPerDay?: boolean;
    };
    /** @description Generic Pagination Response */
    FlagGroupPayloadPagingResponse: {
      /**
       * Format: int32
       * @description Page number
       */
      page?: number;
      /**
       * Format: int32
       * @description Size of pages
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Total Pages
       */
      totalPages?: number;
      /** @description Item response */
      items?: components["schemas"]["FlagGroupPayload"][] | null;
    };
    FlagTypePayload: {
      flagTypeKey?: string | null;
      /** @description A human friendly description */
      description?: string | null;
      /** @description Parent group (if any) */
      flagGroupKey?: string | null;
    };
    /** @description Generic Pagination Response */
    FlagTypePayloadPagingResponse: {
      /**
       * Format: int32
       * @description Page number
       */
      page?: number;
      /**
       * Format: int32
       * @description Size of pages
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Total Pages
       */
      totalPages?: number;
      /** @description Item response */
      items?: components["schemas"]["FlagTypePayload"][] | null;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown;
    };
    RealmPayload: {
      /** @description Label for this realm */
      label?: string | null;
    };
    RealmResponse: {
      /** @description Label for this realm */
      label?: string | null;
      /**
       * Format: uuid
       * @description The id of this realm
       */
      realmId?: string;
    };
    /** @description Generic Pagination Response */
    RealmResponsePagingResponse: {
      /**
       * Format: int32
       * @description Page number
       */
      page?: number;
      /**
       * Format: int32
       * @description Size of pages
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Total Pages
       */
      totalPages?: number;
      /** @description Item response */
      items?: components["schemas"]["RealmResponse"][] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
